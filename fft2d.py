import numpy as npimport cv2import mathimport tensorflow as tfdef LPF_Butterworth(width, height, kRadius, kOrder):    fltDst = np.empty([height, width])    cx = width / 2    cy = height / 2    for row in range(height):        for col in range(width):            kDistance = math.sqrt((col - cx) ** 2 + (row - cy) ** 2)            fltDst[row][col] = 1 / (1 + pow((kDistance / kRadius),                                            (2 * kOrder)))    return fltDstif __name__ == '__main__':    img = cv2.imread("C:/Users/bill.wang/Downloads/Input-test-images-a-Cameraman-grayscale-b-grayscale-Lena-and-c-color-Lena-All.png")    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY).astype(np.float32)    width = img.shape[1]    height = img.shape[0]    inch2mm = 25.4    m_nDPI = 508    szImage = (min(width, height) * inch2mm) / m_nDPI    fcLow = int(szImage * 3 / 2)  # grown-ups    filter = LPF_Butterworth(width, height, fcLow, 4)    # use numpy fft2 ===========    f = np.fft.fft2(img)    f = np.fft.fftshift(f)    f_l = f * filter    f_l = np.fft.ifftshift(f_l)    f_l = np.fft.ifft2(f_l)    f_np = np.real(f_l)    #===========================    input_placeholder = tf.compat.v1.placeholder(tf.float32,                                       shape=[height, width, 1],                                       name='input')    # use tensorflow fft2d ===========    tf_filter = tf.convert_to_tensor(filter, dtype=tf.float32)    tf_filter_comx = tf.expand_dims(tf.complex(tf_filter, tf.zeros(tf_filter.shape)),2)    # fft_org = tf.fft2d(tf.cast(input_placeholder, tf.complex64))    fft_org = tf.complex(input_placeholder, tf.zeros(input_placeholder.shape))    fft_org = tf.fft2d(fft_org)    fft_org = tf.signal.fftshift(fft_org, axes=[0,1])    fft_filter = fft_org * tf_filter_comx    fft_filter = tf.ifft2d(tf.signal.ifftshift(fft_filter, axes=[0,1]))    fft_filter = tf.real(fft_filter)    #================================    sess = tf.Session(config=tf.ConfigProto(device_count={'GPU': 0}))    sess.run(tf.global_variables_initializer())    sess.run(tf.local_variables_initializer())    with sess.as_default():        feed_dict = {input_placeholder: np.expand_dims(img, axis=2)}        f_tf = sess.run(fft_filter, feed_dict=feed_dict)    f_np = cv2.normalize(f_np, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)    f_tf = cv2.normalize(f_tf, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)    cv2.imshow("numpy", f_np)    cv2.imshow("tensorflow", f_tf)    cv2.waitKey()