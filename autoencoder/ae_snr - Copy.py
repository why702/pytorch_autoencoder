#!/usr/bin/env python""" autoencoder for fingerprint"""import timeimport osimport sys# import matplotlib.pyplot as plt# from PIL import Imageimport numpy as npimport cv2import mathimport data_augmentationimport tensorflow as tffrom tensorflow.contrib.layers import conv2d, conv2d_transpose, l2_regularizerfrom tensorflow.contrib.framework import arg_scope# from SSIM_PIL import compare_ssim as ssimfrom tensorflow.contrib.slim import get_variables_to_restoreimport util__author__ = "Bill Wang"__copyright__ = ""__credits__ = []__license__ = ""__version__ = "1.0.0.2"__maintainer__ = "Bill Wang"__email__ = "why702@gmail.com"__status__ = "Study"def LPF_Butterworth(width, height, kRadius, kOrder):    fltDst = np.empty([height, width])    cx = width / 2    cy = height / 2    for row in range(height):        for col in range(width):            kDistance = math.sqrt((col - cx) ** 2 + (row - cy) ** 2)            fltDst[row][col] = 1 / (1 + pow((kDistance / kRadius),                                            (2 * kOrder)))    return fltDstdef HPF_Butterworth(width, height, kRadius, kOrder):    fltDst = np.empty([height, width])    cx = width / 2    cy = height / 2    for row in range(height):        for col in range(width):            kDistance = math.sqrt((col - cx) ** 2 + (row - cy) ** 2)            fltDst[row][col] = 1 - 1 / (1 + pow((kDistance / kRadius),                                                (2 * kOrder)))    return fltDstif __name__ == '__main__':    width = 134    height = 188    img = util.read_bin("D:/data/20191218_ET702_S10_16_v2.0.0.10_wash_20DB/NP_10/output_bin/image_raw/P/13081202/5/enroll/st/2.0.0.10_20191218160751251_13081202_5_5742_c01_OK_TRY_0_et=64.3_hc=1_mica=000115_R1.bin", (height, width), False)    inch2mm = 25.4    m_nDPI = 508    szImage = (min(width, height) * inch2mm) / m_nDPI    fcUp = int(szImage * 3 / 2)  # newborns baby    fcLow = int(szImage * 10 / 2)  # grown-ups    fltNoiseLow = LPF_Butterworth(width, height, fcLow, 4).astype(np.complex)    fltNoiseHigh = HPF_Butterworth(width, height, fcUp, 4)    # split signal / noise by fft    f = np.fft.fft2(img)    f = np.fft.fftshift(f)    f_l = f * fltNoiseLow    f_l = np.fft.ifftshift(f_l)    f_l = np.fft.ifft2(f_l)    f_l = np.real(f_l)    f_h = f * fltNoiseHigh    f_h = np.fft.ifftshift(f_h)    f_h = np.fft.ifft2(f_h)    f_h = np.real(f_h)    f_s = img - f_l  # - f_h    f_s = util.normalize_ndarray(f_s) * 255    f_s = f_s.astype(np.uint8)    input_placeholder = tf.compat.v1.placeholder(tf.float32,                                       shape=[height, width, 1],                                       name='input')    tf_fltNoiseLow = tf.convert_to_tensor(fltNoiseLow, dtype=tf.float32)    tf_fltNoiseHigh = tf.convert_to_tensor(fltNoiseHigh, dtype=tf.float32)    tf_fltNoiseLow_comx = tf.expand_dims(tf.complex(tf_fltNoiseLow, tf.zeros(tf_fltNoiseLow.shape)),2)    tf_fltNoiseHigh_comx = tf.expand_dims(tf.complex(tf_fltNoiseHigh, tf.zeros(tf_fltNoiseHigh.shape)),2)    # tf_fltNoiseLow_comx = tf.expand_dims(tf.complex(tf_fltNoiseLow, tf_fltNoiseLow),2)    # tf_fltNoiseHigh_comx = tf.expand_dims(tf.complex(tf_fltNoiseHigh, tf_fltNoiseHigh),2)    # split signal / noise by fft    fft_org = tf.fft2d(tf.cast(input_placeholder, tf.complex64))    fft_org = tf.signal.fftshift(fft_org, axes=[1,2])    fft_org_low = fft_org * tf_fltNoiseLow_comx    fft_org_high = fft_org * tf_fltNoiseHigh_comx    img_org_low = tf.ifft2d(tf.signal.ifftshift(fft_org_low, axes=[1,2]))    img_org_high = tf.ifft2d(tf.signal.ifftshift(fft_org_high, axes=[1,2]))    img_org_low = tf.real(img_org_low)    img_org_high = tf.real(img_org_high)    img_org_signal = input_placeholder - img_org_low# - img_org_high    # Start running operations on the Graph.    gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.8, allow_growth=True)    sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options,                                            log_device_placement=False))    # sess = tf.Session(config=tf.ConfigProto(device_count={'GPU': 0}))    sess.run(tf.global_variables_initializer())    sess.run(tf.local_variables_initializer())    coord = tf.train.Coordinator()    tf.train.start_queue_runners(coord=coord, sess=sess)    with sess.as_default():        feed_dict = {input_placeholder: np.expand_dims(img, axis=2)}        img_org_low_ = sess.run(img_org_low, feed_dict=feed_dict)    img_org_low_ = util.normalize_ndarray(img_org_low_) * 255    img_org_low_ = img_org_low_.astype(np.uint8)    cv2.imshow("0", f_s)    cv2.imshow("1", img_org_low_)    cv2.waitKey()