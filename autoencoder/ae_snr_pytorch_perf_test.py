import osimport sysimport torchfrom torch.utils.tensorboard import SummaryWritersys.path.append("../pytorch_autoencoder")from utils.util import run_perf_sum_scorefrom utils.data_augmentation_fp import FingerprintDatasetfrom ae_model import autoencoderfrom ae_perf_loss import output_ae_imgs_if __name__ == '__main__':    num_epochs = 100000    batch_size = 128    img_width = 200    img_height = 200    model_width = 224    model_height = 224    pad_width = int((model_width - img_width) / 2)    pad_height = int((model_height - img_height) / 2)    np_pad = ((pad_height, model_height - img_height - pad_height), (pad_width, model_width - img_width - pad_width))    use_cuda = torch.cuda.is_available()    device = torch.device('cuda:0' if use_cuda else 'cpu')    if not os.path.exists('./dc_img'):        os.mkdir('./dc_img')    test_folder = "D:\\git\\Dev2930_NP"    run_perf_sum_score(test_folder, True)    dataset_test = FingerprintDataset(root_dir=test_folder, csv_file='list_test.csv', img_width=img_width,                                      img_height=img_height,                                      pad_width=np_pad, RBS=True)    dataloader_test = torch.utils.data.DataLoader(dataset_test, batch_size=batch_size, shuffle=False)    model = autoencoder().to(device=device)    weighting_file = './conv_autoencoder_1900.pth'    if os.path.exists(weighting_file):        model.load_state_dict(torch.load(weighting_file))        model.eval()        model.to(device)    # test    output_ae_imgs_(test_folder, dataset_test, model, device)    pass